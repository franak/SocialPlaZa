//-- FUNCION DE LA BARRA DE HERRAMIENTAS--\\//-- Modo Seleccion Inversa --\\waf.widget.Grid.prototype.invertSelection = function(){	var sel = this.getSelection();	if(sel.isModeMultiple()){		sel.setToInverted(this.source.length);		this.$domNode.find('.container').trigger('scroll');	}}//-- Modo Seleccion total --\\waf.widget.Grid.prototype.selectAll = function(){	var sel = this.getSelection();	if(sel.isModeMultiple()){		sel.selectRange(0, this.source.length - 1, true);		this.$domNode.find('.container').trigger('scroll');	}}//-- Modo Seleccion nula --\\waf.widget.Grid.prototype.selectNone = function(){	var sel = this.getSelection();	if(sel.isModeMultiple()){		sel.setSelectedRows([]);		this.$domNode.find('.container').trigger('scroll');	}}//-- Modo Seleccion aislada --\\waf.Selection.prototype.setToInverted = function(length){	if(this.isModeMultiple()){		this.buildFromObject({			butRows: this.getSelectedRows(),			mode: 'multiple',			ranges: [{start: 0, end: length - 1}]		});	}}//-- Modo Mostrar Todos los registros --\\function mostrarTodo(recurso){			recurso.all();		}//-- Modo Omitir registros seleccionados --\\function omitirSeleccion(recurso, aOmitidos){			var tamanioRecurso = recurso.length;	var aRestoOmitidos =[];		//recorrido del recurso	for(var i=0; i < tamanioRecurso; i++){		aRestoOmitidos[aRestoOmitidos.length] = i;				//recorrido del los seleccionados omitidos		for(var x = 0; x < aOmitidos.length; x++){						if(aOmitidos[x] == i){								//eliminacion de los selecionados				var pos = aRestoOmitidos.indexOf( i );				pos > -1 && aRestoOmitidos.splice( pos, 1 );			}					}	}		console.log(aRestoOmitidos);}/* The getNumberRow create an array that will be passed to the setSelectedRows method of the datagrid widget */function getNumberRow(intNumberElement) {			var arr1 = new Array();			for(var i = 0; i < intNumberElement; i++)	{		arr1[i] = i;	}	      return arr1;}/*Llamada a la funcion de mostrar registros segun un valor pasado por un parametrobtnFilter.click = function btnFilter_click (event){    $('dataGrid6').setSelectionMode("multiple");	$('dataGrid6').setSelectedRows(getNumberRow($('txtNumber').getValue()));	$('dataGrid6').reduceToSelected();	$('dataGrid6').setSelectionMode("single");	};*///-- FUNCIONES CONSULTAS EN LOS MOVIMIENTOS DE CAJA TPV --\\//Estas funciones siempre hacen referencia a componentes. De ahí el parametro $comp en todas las funciones//++ Consulta por rango de fechas ++\\function consultarRangoFechas($comp,f1,f2){		var collMovimientos = $comp.sources.cajasMovimientos.getEntityCollection();		collMovimientos.query("fecha >=:1 and fecha <:2",f1,f2, { onSuccess: function(event) // execute the query on the entity collection (and not on the datasource)	    {	      var newSet = event.entityCollection; // put the resulting entity collection into newSet		  $comp.sources.cajasMovimientos.setEntityCollection(newSet); // replace the datasource's current entity collection	  	} 	});}//++ Consulta por medio de pago del documento ++\\function consultarMedioPago($comp,medioPago){		var collMovimientos = $comp.sources.cajasMovimientos.getEntityCollection();		collMovimientos.query("MedioPago.Descripcion =:1",medioPago, { onSuccess: function(event) // execute the query on the entity collection (and not on the datasource)	    {	      var newSet = event.entityCollection; // put the resulting entity collection into newSet		  $comp.sources.cajasMovimientos.setEntityCollection(newSet); // replace the datasource's current entity collection	  	} 	});}//++ Consulta por numero del documento ++\\function consultarNumeroDocumento($comp,numero){		var collMovimientos = $comp.sources.cajasMovimientos.getEntityCollection();	collMovimientos.query("Documento.Numero =:1",numero, { onSuccess: function(event) // execute the query on the entity collection (and not on the datasource)	    {	      var newSet = event.entityCollection; // put the resulting entity collection into newSet		  console.log(newSet);		  $comp.sources.cajasMovimientos.setEntityCollection(newSet); // replace the datasource's current entity collection	  	} 	});}//++ Consulta por referencia al documento ++\\function consultarReferenciaDocumento($comp,denom){		var collMovimientos = $comp.sources.cajasMovimientos.getEntityCollection();	collMovimientos.query("Documento.Denom =:1",denom, { onSuccess: function(event) // execute the query on the entity collection (and not on the datasource)	    {	      var newSet = event.entityCollection; // put the resulting entity collection into newSet		  $comp.sources.cajasMovimientos.setEntityCollection(newSet); // replace the datasource's current entity collection	  	  	  	} 	});}